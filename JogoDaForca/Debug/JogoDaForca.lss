
JogoDaForca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800130  00800130  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121f  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000710  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000959  00000000  00000000  00002cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
  9e:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <cmd_LCD>:
//---------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)				//c é o dado  e cd indica se é instrução ou caractere
{
	if(cd==0)
  a6:	61 11       	cpse	r22, r1
  a8:	02 c0       	rjmp	.+4      	; 0xae <cmd_LCD+0x8>
		clr_bit(CONTR_LCD,RS);
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <cmd_LCD+0xa>
	else
		set_bit(CONTR_LCD,RS);
  ae:	29 9a       	sbi	0x05, 1	; 5

	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F)|(0xF0 & c);		
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	45 e0       	ldi	r20, 0x05	; 5
  be:	4a 95       	dec	r20
  c0:	f1 f7       	brne	.-4      	; 0xbe <cmd_LCD+0x18>
  c2:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	
	#endif
	
	pulso_enable();
  c4:	28 9a       	sbi	0x05, 0	; 5
  c6:	95 e0       	ldi	r25, 0x05	; 5
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <cmd_LCD+0x22>
  cc:	00 00       	nop
  ce:	28 98       	cbi	0x05, 0	; 5
  d0:	40 ef       	ldi	r20, 0xF0	; 240
  d2:	4a 95       	dec	r20
  d4:	f1 f7       	brne	.-4      	; 0xd2 <cmd_LCD+0x2c>

	//segundo nibble de dados - 4 LSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c<<4));		
  d6:	2b b1       	in	r18, 0x0b	; 11
  d8:	92 2f       	mov	r25, r18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	40 e1       	ldi	r20, 0x10	; 16
  de:	84 9f       	mul	r24, r20
  e0:	90 01       	movw	r18, r0
  e2:	11 24       	eor	r1, r1
  e4:	29 2b       	or	r18, r25
  e6:	2b b9       	out	0x0b, r18	; 11
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <cmd_LCD+0x44>
  ee:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
	#endif
	
	pulso_enable();
  f0:	28 9a       	sbi	0x05, 0	; 5
  f2:	45 e0       	ldi	r20, 0x05	; 5
  f4:	4a 95       	dec	r20
  f6:	f1 f7       	brne	.-4      	; 0xf4 <cmd_LCD+0x4e>
  f8:	00 00       	nop
  fa:	28 98       	cbi	0x05, 0	; 5
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <cmd_LCD+0x58>
	
	if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza espera LCD estar pronto
 102:	61 11       	cpse	r22, r1
 104:	08 c0       	rjmp	.+16     	; 0x116 <cmd_LCD+0x70>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	30 f4       	brcc	.+12     	; 0x116 <cmd_LCD+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9f e1       	ldi	r25, 0x1F	; 31
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <cmd_LCD+0x68>
 112:	00 c0       	rjmp	.+0      	; 0x114 <cmd_LCD+0x6e>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 118:	29 98       	cbi	0x05, 1	; 5
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <inic_LCD_4bits+0xa>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <inic_LCD_4bits+0x14>
 12c:	00 00       	nop
	
	_delay_ms(20);	 		//tempo para estabilizar a tensão do LCD, após VCC ultrapassar 4.5 V (na prática pode
							//ser maior). 
	//interface de 8 bits						
	#if (nibble_dados)
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;		
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	80 63       	ori	r24, 0x30	; 48
 134:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	25 e0       	ldi	r18, 0x05	; 5
 138:	2a 95       	dec	r18
 13a:	f1 f7       	brne	.-4      	; 0x138 <inic_LCD_4bits+0x20>
 13c:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;		
	#endif						
							
	pulso_enable();			//habilitação respeitando os tempos de resposta do LCD
 13e:	28 9a       	sbi	0x05, 0	; 5
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <inic_LCD_4bits+0x2a>
 146:	00 00       	nop
 148:	28 98       	cbi	0x05, 0	; 5
 14a:	90 ef       	ldi	r25, 0xF0	; 240
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <inic_LCD_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <inic_LCD_4bits+0x3c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <inic_LCD_4bits+0x42>
 15a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <inic_LCD_4bits+0x46>
 162:	00 00       	nop
	_delay_ms(5);		
	pulso_enable();
 164:	28 9a       	sbi	0x05, 0	; 5
 166:	25 e0       	ldi	r18, 0x05	; 5
 168:	2a 95       	dec	r18
 16a:	f1 f7       	brne	.-4      	; 0x168 <inic_LCD_4bits+0x50>
 16c:	00 00       	nop
 16e:	28 98       	cbi	0x05, 0	; 5
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <inic_LCD_4bits+0x5a>
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <inic_LCD_4bits+0x62>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <inic_LCD_4bits+0x68>
 180:	00 00       	nop
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	9a 95       	dec	r25
 186:	f1 f7       	brne	.-4      	; 0x184 <inic_LCD_4bits+0x6c>
 188:	00 00       	nop
	_delay_us(200);
	pulso_enable();	/*até aqui ainda é uma interface de 8 bits.
 18a:	28 9a       	sbi	0x05, 0	; 5
 18c:	25 e0       	ldi	r18, 0x05	; 5
 18e:	2a 95       	dec	r18
 190:	f1 f7       	brne	.-4      	; 0x18e <inic_LCD_4bits+0x76>
 192:	00 00       	nop
 194:	28 98       	cbi	0x05, 0	; 5
 196:	80 ef       	ldi	r24, 0xF0	; 240
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <inic_LCD_4bits+0x80>
					estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
					modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o tiver sido.*/
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados) 
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;		
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <inic_LCD_4bits+0x8e>
 1aa:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
	#endif
	
	pulso_enable();		
 1ac:	28 9a       	sbi	0x05, 0	; 5
 1ae:	25 e0       	ldi	r18, 0x05	; 5
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <inic_LCD_4bits+0x98>
 1b4:	00 00       	nop
 1b6:	28 98       	cbi	0x05, 0	; 5
 1b8:	80 ef       	ldi	r24, 0xF0	; 240
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <inic_LCD_4bits+0xa2>
   	cmd_LCD(0x28,0); 		//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
							//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(0x08,0);		//desliga o display
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x01,0);		//limpa todo o display
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x0C,0);		//mensagem aparente cursor inativo não piscando   
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 1e6:	08 95       	ret

000001e8 <escreve_LCD>:
}
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD -  dados armazenados na RAM
//---------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) cmd_LCD(*c,1);
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	39 f0       	breq	.+14     	; 0x202 <escreve_LCD+0x1a>
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <escreve_LCD+0xe>
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <Game>:
int y = 0;
int passed = 0;
int endGame = 0;
	
void Game(int Key)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
	if (Key == 1)
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	91 05       	cpc	r25, r1
 210:	91 f4       	brne	.+36     	; 0x236 <Game+0x2e>
	{
		if (LetterPosition == 25)
 212:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LetterPosition>
 216:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <LetterPosition+0x1>
 21a:	89 31       	cpi	r24, 0x19	; 25
 21c:	91 05       	cpc	r25, r1
 21e:	29 f4       	brne	.+10     	; 0x22a <Game+0x22>
		{
			LetterPosition = 0;
 220:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <LetterPosition+0x1>
 224:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <LetterPosition>
 228:	4b c0       	rjmp	.+150    	; 0x2c0 <Game+0xb8>
		}
		else
		{
			LetterPosition = LetterPosition + 1;
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <LetterPosition+0x1>
 230:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <LetterPosition>
 234:	45 c0       	rjmp	.+138    	; 0x2c0 <Game+0xb8>
		}
	}
	if (Key == 2)
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 05       	cpc	r25, r1
 23a:	09 f0       	breq	.+2      	; 0x23e <Game+0x36>
 23c:	a1 c0       	rjmp	.+322    	; 0x380 <Game+0x178>
	{
		if (LetterPosition ==  0)
 23e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <LetterPosition>
 242:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <LetterPosition+0x1>
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	39 f4       	brne	.+14     	; 0x258 <Game+0x50>
		{
			LetterPosition = 25;
 24a:	89 e1       	ldi	r24, 0x19	; 25
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <LetterPosition+0x1>
 252:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <LetterPosition>
 256:	34 c0       	rjmp	.+104    	; 0x2c0 <Game+0xb8>
		}
		else
		{
			LetterPosition = LetterPosition - 1;
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <LetterPosition+0x1>
 25e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <LetterPosition>
 262:	2e c0       	rjmp	.+92     	; 0x2c0 <Game+0xb8>
	}
	if (Key == 3)
	{
		for (x=0;x<5;x++)
		{
			if (Letters[LetterPosition] == SecretDigits[x])
 264:	80 81       	ld	r24, Z
 266:	98 13       	cpse	r25, r24
 268:	04 c0       	rjmp	.+8      	; 0x272 <Game+0x6a>
			{
				Digits[x] = Letters[LetterPosition];
 26a:	9c 93       	st	X, r25
				SecretDigits[x] = '*';
 26c:	c0 83       	st	Z, r28
				passed = 1;
 26e:	27 2f       	mov	r18, r23
 270:	36 2f       	mov	r19, r22
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	11 96       	adiw	r26, 0x01	; 1
			LetterPosition = LetterPosition - 1;
		}
	}
	if (Key == 3)
	{
		for (x=0;x<5;x++)
 276:	e4 17       	cp	r30, r20
 278:	f5 07       	cpc	r31, r21
 27a:	a1 f7       	brne	.-24     	; 0x264 <Game+0x5c>
 27c:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <passed+0x1>
 280:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <passed>
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <x+0x1>
 28c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <x>
				Digits[x] = Letters[LetterPosition];
				SecretDigits[x] = '*';
				passed = 1;
			}
		}
		if (passed == 0)
 290:	23 2b       	or	r18, r19
 292:	91 f4       	brne	.+36     	; 0x2b8 <Game+0xb0>
		{
			lifes = lifes - 1;
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			if (lifes == 0)
 2a6:	89 2b       	or	r24, r25
 2a8:	59 f4       	brne	.+22     	; 0x2c0 <Game+0xb8>
			{
				endGame = 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 2b2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <Game+0xb8>
			}
		}
		else{
			passed = 0;
 2b8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <passed+0x1>
 2bc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <passed>
		
	}
	
	
	
	cmd_LCD(0x80, 0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Digits[0], 1);
 2c8:	cc e1       	ldi	r28, 0x1C	; 28
 2ca:	d1 e0       	ldi	r29, 0x01	; 1
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	88 81       	ld	r24, Y
 2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Digits[1], 1);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Digits[2], 1);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8a 81       	ldd	r24, Y+2	; 0x02
 2e0:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Digits[3], 1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Digits[4], 1);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(0xC0, 0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(Letters[LetterPosition], 1);
 2fc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <LetterPosition>
 300:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <LetterPosition+0x1>
 304:	ee 5f       	subi	r30, 0xFE	; 254
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(0xC7, 0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	87 ec       	ldi	r24, 0xC7	; 199
 314:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD('v', 1);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	86 e7       	ldi	r24, 0x76	; 118
 31c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD('i', 1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	89 e6       	ldi	r24, 0x69	; 105
 324:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD('d', 1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	84 e6       	ldi	r24, 0x64	; 100
 32c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD('a', 1);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	81 e6       	ldi	r24, 0x61	; 97
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD('s', 1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	83 e7       	ldi	r24, 0x73	; 115
 33c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(':', 1);
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	8a e3       	ldi	r24, 0x3A	; 58
 344:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD((lifes + '0'), 1);
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>

}
 354:	18 c0       	rjmp	.+48     	; 0x386 <Game+0x17e>
	}
	if (Key == 3)
	{
		for (x=0;x<5;x++)
		{
			if (Letters[LetterPosition] == SecretDigits[x])
 356:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <LetterPosition>
 35a:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <LetterPosition+0x1>
 35e:	ee 5f       	subi	r30, 0xFE	; 254
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	90 81       	ld	r25, Z
 364:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <passed>
 368:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <passed+0x1>
 36c:	e1 e2       	ldi	r30, 0x21	; 33
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	ac e1       	ldi	r26, 0x1C	; 28
 372:	b1 e0       	ldi	r27, 0x01	; 1
 374:	46 e2       	ldi	r20, 0x26	; 38
 376:	51 e0       	ldi	r21, 0x01	; 1
			{
				Digits[x] = Letters[LetterPosition];
				SecretDigits[x] = '*';
 378:	ca e2       	ldi	r28, 0x2A	; 42
				passed = 1;
 37a:	71 e0       	ldi	r23, 0x01	; 1
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	72 cf       	rjmp	.-284    	; 0x264 <Game+0x5c>
		else
		{
			LetterPosition = LetterPosition - 1;
		}
	}
	if (Key == 3)
 380:	03 97       	sbiw	r24, 0x03	; 3
 382:	49 f3       	breq	.-46     	; 0x356 <Game+0x14e>
 384:	9d cf       	rjmp	.-198    	; 0x2c0 <Game+0xb8>
	cmd_LCD('a', 1);
	cmd_LCD('s', 1);
	cmd_LCD(':', 1);
	cmd_LCD((lifes + '0'), 1);

}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <main>:


int main()
{
	DDRD = 0xFF; //PORTD como saída
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //PORTB como saída
 390:	84 b9       	out	0x04, r24	; 4
	//BOTÕES NO PC0, PC1 e PC2
	DDRC = 0x00; //PORTC como entrada
 392:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;//Pull up
 394:	88 b9       	out	0x08, r24	; 8
	inic_LCD_4bits(); //inicializa o LCD
 396:	0e 94 8c 00 	call	0x118	; 0x118 <inic_LCD_4bits>
	Game(0);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 04 01 	call	0x208	; 0x208 <Game>
	while(1)
	{	
		if (!tst_bit(PINC, PC0)){Game(1);};
 3a2:	30 99       	sbic	0x06, 0	; 6
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <main+0x22>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 04 01 	call	0x208	; 0x208 <Game>
		if (!tst_bit(PINC, PC1)){Game(2);};
 3ae:	31 99       	sbic	0x06, 1	; 6
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <main+0x2e>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 04 01 	call	0x208	; 0x208 <Game>
		if (!tst_bit(PINC, PC2)){Game(3);};
 3ba:	32 99       	sbic	0x06, 2	; 6
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <main+0x3a>
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 04 01 	call	0x208	; 0x208 <Game>
		if (endGame == 1)
 3c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 3ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	51 f0       	breq	.+20     	; 0x3e6 <main+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	84 e3       	ldi	r24, 0x34	; 52
 3d6:	9c e0       	ldi	r25, 0x0C	; 12
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x4c>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x56>
 3e2:	00 00       	nop
 3e4:	de cf       	rjmp	.-68     	; 0x3a2 <main+0x16>
		{
			cmd_LCD(1, 0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
			escreve_LCD("GAME OVER");
 3ee:	86 e2       	ldi	r24, 0x26	; 38
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <escreve_LCD>
 3f6:	2f ef       	ldi	r18, 0xFF	; 255
 3f8:	83 e2       	ldi	r24, 0x23	; 35
 3fa:	94 ef       	ldi	r25, 0xF4	; 244
 3fc:	21 50       	subi	r18, 0x01	; 1
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	90 40       	sbci	r25, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x70>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
			break;
		}
		_delay_ms(250);
		
	}
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
